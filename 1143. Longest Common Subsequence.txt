1143. Longest Common Subsequence

class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int[][] dp = new int[text1.length() + 1][text2.length() + 1];//Create a 2D matrix like that previos operations (This +1 means we can add that extra 0 as row )

        for (int i = 0; i < dp.length; i++)//1 st row we can fill with 0
            dp[i][0] = 0;
        for (int j = 0; j < dp[0].length; j++)//1 st col we can fill with 0
            dp[0][j] = 0;

        for (int i = 1; i < dp.length; i++) {
            for (int j = 1; j < dp[i].length; j++) {//To see the single single cell
                if (text1.charAt(i - 1) == text2.charAt(j - 1)) {//If two cell value is match (We can give -1 which means for that extra row and col we have so we canmatch with index pos so we can put -1)
                    dp[i][j] = 1 + dp[i - 1][j - 1];//we can add with diagnoal side value with current cell value
                } else {//If does not match
                    dp[i][j] = Math.max(dp[i][j - 1], dp[i - 1][j]);//We can get the max value from left or above cell value
                }
            }
        }

        return dp[dp.length - 1][dp[0].length - 1];//We can get the corner value of max value common subsequence
    }
}