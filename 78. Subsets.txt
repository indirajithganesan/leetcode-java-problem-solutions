78. Subsets

class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        set(result, new ArrayList<>(), nums, 0);
        return result;
    }
       //nums = [1,2,3] r = [] tl = [](Initially)
    public static void set(List<List<Integer>> r, List<Integer> t1, int[] nums, int s) {
        r.add(new ArrayList<>(t1));//r = [[],[1],]...etc.,

        for (int i = s; i < nums.length; i++) {
            t1.add(nums[i]);//[1]
            set(r, t1, nums, i + 1);
            t1.remove(t1.size() - 1);//t1->[1]->after remove []
        }
    }
}


/*class Solution {
    public List<List<Integer>> subsets(int[] nums) {//;List within list(For ans storing)
        List<List<Integer>> result = new ArrayList<>();
        set(result, new ArrayList<>(), nums, 0);//arg1->result to be ans store so we give,arg2->For inside to create a list(temporary list),arg3->nums element pass,arg4->start position because start position will change frequent so we can pass it in it ans we can change with the method
        return result;
    }

nums=[1,2,3] r=[] tl = []

    public static void set(List<List<Integer>> r, List<Integer> t1, int[] nums, int s) {//a
        r.add(new ArrayList<>(t1));//To add the input to templist(It can contains copy of tl)

        for (int i = s; i < nums.length; i++) {//For access the value inside
            t1.add(nums[i]);//To add the values to T.L(single value)
            set(r, t1, nums, i + 1);//Instead of storing separate if we can call the method it can automatically add in T.L
            t1.remove(t1.size() - 1);//it can remove the values in the tl
        }
    }
}*/