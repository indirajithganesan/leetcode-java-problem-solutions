1910. Remove All Occurrences of a Substring

import java.util.*;
class Solution {
    private void calculateLPS(String part, int n, int[] lps) {
        int i = 0, j = 1;
       //This can search for matching the strings
        while (j < n) {
            if (part.charAt(i) == part.charAt(j)) {
                lps[j] = i + 1;
                i++;
                j++;
            } else {
                if (i > 0) {
                    i = lps[i - 1];
                } else {
                    j++;
                }
            }
        }
    }
    private void removeSubstrings(StringBuilder s, String part, int[] lps) {
        int m = s.length();
        int n = part.length();
        int i = 0; // For string
        int j = 0; // For pattern
        while (i < m) {
            if (s.charAt(i) == part.charAt(j)) {//If both characters are match to move the both pointers
                i++;
                j++;
            }
            if (j == n) { // Found part match which means in pattern we reach go to zero.so we said it is fully matched
                s.delete(i - n, i); // Remove substring and get the next index
                m = s.length(); // Size of string will change
                i = Math.max(0, i - 2 * n); // Update start point with this condition .If possible index go to that if not goto index 0(move left of index) .This for checking middle any pattern found
                j = 0;//Again starting of the pattern pointer to check any next match found 
            }
            if (i < m && s.charAt(i) != part.charAt(j)) {
                if (j == 0) {
                    i++;
                } else {
                    j = lps[j - 1];//If i>0 we can make the j value with this condition
                }
            }
        }
    }
    public String removeOccurrences(String s, String part) {
        int n = part.length();
        int[] lps = new int[n];
        Arrays.fill(lps, 0);//If possible index go to that if not goto index 0
        calculateLPS(part, n, lps);//Call that fuction
        StringBuilder sb = new StringBuilder(s);
        removeSubstrings(sb, part, lps);//Call that fuction
        return sb.toString();
    }
    public static void main(String[] args) {
        Solution sol = new Solution();
        String s = "daabcbaabcbc";
        String part = "abc";
        System.out.println(sol.removeOccurrences(s, part)); // Output: "dab"
    }
}