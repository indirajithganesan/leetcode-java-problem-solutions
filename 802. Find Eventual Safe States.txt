802. Find Eventual Safe States

class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        Map<Integer, Boolean> memoizationMap = new HashMap<>();
        for (int i = 0; i < graph.length; i++) {
            // terminal node
            if (graph[i].length == 0)   
                memoizationMap.put(i, true);
            }   
        for (int i = 0; i < graph.length; i++) {
            boolean result = dfs(i, graph, new HashSet<Integer>(), memoizationMap);
            memoizationMap.put(i, result);
            System.out.println("done checking node: " + i);
        }
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < graph.length; i++) {
            if (memoizationMap.get(i)) 
                list.add(i);
        }
        return list;
          }
    public boolean dfs(int curr, int[][] graph, Set<Integer> visited, Map<Integer, Boolean> memoizationMap) {
        if(memoizationMap.containsKey(curr)){
           return memoizationMap.get(curr);
        }
        if(visited.contains(curr)){
           return false; }
        visited.add(curr);
        for (int i : graph[curr]) {
             boolean flag = dfs(i, graph, visited, memoizationMap);
    if (flag) 
        memoizationMap.put(i, true);
     else 
        return false;
    }
// backtracking
visited.remove(curr);
return true;
    }
}