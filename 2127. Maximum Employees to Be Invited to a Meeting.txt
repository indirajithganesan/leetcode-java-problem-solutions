2127. Maximum Employees to Be Invited to a Meeting

import java.util.*;

class Solution {
    //Mark all the non-cyclic nodes
    private int kahnsTopologicalSort(int[] adj, int[] indegree, boolean[] visited, int source) {
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(source);//Push nodes into queue

        int lastNode = -1;
        while (!queue.isEmpty()) {
            int curr = queue.poll();//Take front element and marked as visited
            visited[curr] = true;
            lastNode = curr;
             //Everyone like somebody (and only 1 person)
            int neighbor = adj[curr];
            indegree[neighbor]--;
            if (indegree[neighbor] == 0 && !visited[neighbor]) {//If not visited to reperform above condition
                queue.offer(neighbor);
            }
        }
        return adj[lastNode];
    }
    //Find max tail length
    private int maxDepthBFS(List<List<Integer>> reverseAdj, boolean[] origVisited, int n, int source, int avoid) {
        boolean[] visited = new boolean[n];
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(source);
        visited[source] = true;
        visited[avoid] = true;
        //Counting number of levels
        int levels = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int curr = queue.poll();
                origVisited[curr] = true;

                for (int neighbor : reverseAdj.get(curr)) {
                    if (!visited[neighbor]) {
                        visited[neighbor] = true;
                        queue.offer(neighbor);
                    }
                }
            }
            levels++;
        }
        return levels;
    }
    //Find cycle length from source node
    private int bfs(int[] adj, boolean[] visited, int source) {
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(source);
        visited[source] = true;
        //Cycle size count
        int count = 0;
        while (!queue.isEmpty()) {
            int curr = queue.poll();

            if (!visited[adj[curr]]) {
                visited[adj[curr]] = true;
                queue.offer(adj[curr]);
            }
            count++;
        }
        return count;
    }

    public int maximumInvitations(int[] adj) {
        int n = adj.length;
        List<List<Integer>> reverseAdj = new ArrayList<>();
        for (int i = 0; i < n; i++) reverseAdj.add(new ArrayList<>());
        int[] indegree = new int[n];//For khan's Algo (Topological sort)
        //Step:1 make reverse adjacency list and count number of indegree
        for (int i = 0; i < n; i++) {
            reverseAdj.get(adj[i]).add(i);
            indegree[adj[i]]++;
        }
    //Step:2  Mark nodes not in any cycle(Using topological sort)
        int totalTailLen = 0;
        boolean[] visited = new boolean[n];
        for (int i = 0; i < n; i++) {
            if (indegree[i] == 0 && !visited[i]) {
                int node = kahnsTopologicalSort(adj, indegree, visited, i);
                if (adj[adj[node]] == node) {//Cycle of length - 2
                    int lenTail = maxDepthBFS(reverseAdj, visited, n, node, adj[node]) - 1;
                    totalTailLen += lenTail;//All 2-len cycles with tail can be together
                    visited[node] = false;
                }
            }
        }
        //Step:3 For cycle size>2 ,Track max size  across all cycles
        int twoSizeCycles = 0;
        int maxCycleSize = 0;
        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                int cycleSize = bfs(adj, visited, i);
                if (cycleSize == 2) {
                    twoSizeCycles++;
                } else {
                    maxCycleSize = Math.max(maxCycleSize, cycleSize);
                }
            }
        }
       //Step: 4 Find best option of the 2 cases and return (All 2 size cycles can be added) 
        int cycleSize2 = totalTailLen + 2 * twoSizeCycles;
        return Math.max(cycleSize2, maxCycleSize);
    }
}