2560. House Robber IV

import java.util.Arrays;

class Solution {
    private boolean canAssign(int maxVal, int[] nums, int k) {
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] <= maxVal) {//Check mid is greater
                count++;//When it is lesser than or equal mid value in numsarray
                i++; // Skip the next house
            }
        }
        return count >= k;//When it is lesser than or equal k value return true. Otherwise return false
    }

    public int minCapability(int[] nums, int k) {
        //Find min and max value from given num array
        int low = Arrays.stream(nums).min().getAsInt();
        int high = Arrays.stream(nums).max().getAsInt();
        int ans = 0;
       //Apply binary search
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (canAssign(mid, nums, k)) {//Check i pick k no.of items,count value is less than the mid value from nums array
                ans = mid;//If above true assign and save value and apply this two conditions
                high = mid - 1;
                //If mid value is less than 5.so go else condition
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }
}