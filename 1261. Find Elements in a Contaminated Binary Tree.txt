1261. Find Elements in a Contaminated Binary Tree

import java.util.HashSet;
import java.util.Set;

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int x) { val = x; }
}

class FindElements {
    private Set<Integer> nodeValues = new HashSet<>();

    public FindElements(TreeNode root) {
        if (root != null) {
            root.val = 0;
            nodeValues.add(0);//Root node always be zero so set with zero
            recoverBinaryTree(root.left, 1);//Make a left value and value will be 2*0+1 = 1
            recoverBinaryTree(root.right, 2);//Make a right value and value will be 2*0+2 = 2
        }
    }
//Recursive code 
    private void recoverBinaryTree(TreeNode curr, int val) {
        if (curr == null) return;//If null .Return it is not valid node

        curr.val = val;
        nodeValues.add(val);//If it is valid to save the values  in the unordered sets with below conditions
        recoverBinaryTree(curr.left, 2 * val + 1);//Then apply the condition for left 2x+1
        recoverBinaryTree(curr.right, 2 * val + 2);//Then apply the condition for right 2x+2
    }

    public boolean find(int target) {//After get the elements in set compare with target element if present return true.Else return false
        return nodeValues.contains(target);
    }
}