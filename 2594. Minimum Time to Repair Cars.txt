2594. Minimum Time to Repair Cars

import java.util.Arrays;

class Solution {
    private boolean canAssign(int[] ranks, long mid, int cars) {
        long count = 0;
        for (int rank : ranks) {
            count += Math.sqrt(mid / rank);//Square root value added to count
        }
        return count >= cars;//If count value is greater than or equal to cars size to update that mid value as answer
    }

    public long repairCars(int[] ranks, int cars) {
        long low = 1; // For 1 car and 1 rank
        long high = Arrays.stream(ranks).min().getAsInt() * (long) cars * cars;//If int take size is not enough
        long ans = 0;

        while (low <= high) {
            long mid = low + (high - low) / 2;
            if (canAssign(ranks, mid, cars)) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }
}
